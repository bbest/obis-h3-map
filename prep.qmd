---
title: "Prepare OBIS data"
format: html
editor_options: 
  chunk_output_type: console
---

## Read OBIS data

Download latest OBIS data from:

* [obis.org/data/access](https://obis.org/data/access/)\
  **Download** button

```{r setup}
librarian::shelf(
  dplyr, duckdb, duckdbfs, glue, here, mapgl, mapview, sf, stringr)

is_server <- Sys.info()[["sysname"]] == "Linux"
dir_obis  <- ifelse(
  is_server,
  "/share/data/obis.org",
  "~/My Drive/projects/mbon/mbon-sdm/data/raw/obis.org")
dir_pq    <- glue("{dir_obis}/obis_20250318_parquet")
obis_db   <- glue("{dir_pq}/obis.duckdb")
redo_db   <- FALSE

stopifnot(dir.exists(dir_obis))
```

## Copy parquet files to duckdb

```{r pq_to_duckdb}
con <- dbConnect(duckdb::duckdb(), dbdir = obis_db, read_only = F)
load_spatial(conn = con)
load_h3(conn = con)
dbExecute(con, "INSTALL json; LOAD json")

# OBIS example
# result <- dbGetQuery(con, glue("
#     select * from read_parquet('{dir_pq}/occurrence/*.parquet')
#     where ST_Intersects(geometry, ST_GeomFromText('POLYGON ((2.831383 51.212045, 2.896957 51.212045, 2.896957 51.240211, 2.831383 51.240211, 2.831383 51.212045))'))
# "))

dbExecute(con, glue("
  CREATE TABLE occ AS
    SELECT * FROM read_parquet('{dir_pq}/occurrence/*.parquet');" ) )
# takes an hour or so

dbExecute(con, glue("
  CREATE INDEX idx_occ_geometry ON occ USING RTREE (geometry);;" ) )

# test ----
# ply <- "POLYGON ((2.831383 51.212045, 2.896957 51.212045, 2.896957 51.240211, 2.831383 51.240211, 2.831383 51.212045))" 
# 
# system.time({
# result_sf <- tbl(con, "occ") |> 
#   filter(st_intersects(geometry, ST_GeomFromText({ply}))) |> 
#   to_sf(conn = con, crs = 4326) |>  # expects geometry or geom
#   tibble() |> 
#   st_as_sf()
# }) # 154 -> 34 secs after RTREE index

# result_sf |> 
#   slice(1:3) |> 
#   glimpse()

# result_sf |> 
#   select(id, aphiaid, scientificName, date_year) |> 
#   mapView()

```

## Add H3 hexagon IDs

- [Tables of Cell Statistics Across Resolutions | H3](https://h3geo.org/docs/core-library/restable/)

```{r}
dbExecute(con, glue("
  ALTER TABLE occ ADD COLUMN hexid_res2 BIGINT;" ) )
dbExecute(con, glue("
  ALTER TABLE occ ADD COLUMN hexid_res10 BIGINT;" ) )
# dbListFields(con, "occ") |>  str_subset("Lat")
# dbListFields(con, "occ_10k")

dbExecute(con, glue("
  CREATE INDEX IF NOT EXISTS idx_occ_hexid_res2  ON occ (hexid_res2);"))
dbExecute(con, glue("
  CREATE INDEX IF NOT EXISTS idx_occ_hexid_res10 ON occ (hexid_res10);"))


dbExecute(con, glue("
  CREATE TABLE occ_10k AS
    SELECT * FROM occ LIMIT 10000;"))

dbExecute(con, glue("
  UPDATE occ_10k
  SET
    hexid_res2  = h3_latlng_to_cell(decimalLatitude, decimalLongitude, 2),
    hexid_res10 = h3_latlng_to_cell(decimalLatitude, decimalLongitude, 10);" ) )


 tbl(con, "occ") |> 
#   filter(st_intersects(geometry, ST_GeomFromText({ply}))) |> 
#   to_sf(conn = con, crs = 4326) |>  # expects geometry or geom
#   tibble() |> 
#   st_as_sf()
   
h <- st_read(con, query = "
  SELECT
    hexid_res2,
    count() AS n,
    ST_AsWKB(ST_GeomFromText(h3_cell_to_boundary_wkt(hexid_res2))) AS geom
  FROM occ_10k
  GROUP BY hexid_res2;", geometry_column = "geom", crs = 4326)

mapView(h, zcol = "n")

h3j <- here("occ_10k_n_res2.h3j")

tbl(con, "occ_10k") |> 
  rename(hexid = hexid_res2) |> 
  group_by(hexid) |> 
  summarize(
    n = n()) |> 
  to_h3j(h3j, conn = con)
```

## Map

```{r}
url = "https://inspide.github.io/h3j-h3t/examples/h3j/sample.h3j"

maplibre(center=c(-3.704, 40.417), zoom=15, pitch=30) |>
  add_h3j_source(
    "h3j_testsource",
    url = url)  |>
  # add_fill_extrusion_layer(
  #   id = "h3j_testlayer",
  #   source = "h3j_testsource",
  #   fill_extrusion_color = interpolate(
  #     column = "value",
  #     values = c(0, 21.864),
  #     stops = c("#430254", "#f83c70") ),
  #   fill_extrusion_height = list(
  #     "interpolate",
  #     list("linear"),
  #     list("zoom"),
  #     14,
  #     0,
  #     15.05,
  #     list("*", 10, list("get", "value")) ),
  #   fill_extrusion_opacity = 0.7 )
  add_fill_layer(
    id = "h3j_testlayer",
    source = "h3j_testsource",
    fill_color = interpolate(
      column = "value",
      values = c(0, 21.864),
      stops = c("#430254", "#f83c70") ),
    fill_opacity = 0.7 )
```



## Shutdown database

```{r db_shutdown}
dbDisconnect(con, shutdown = TRUE); rm(con)
```
